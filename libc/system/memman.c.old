#include <system/memman.h>

/* BLOCK FORMAT:
 * Blocks have a header at the beginning. In used blocks, this simply consists of one size_t stating the size of the block. The size does not include the header.
 * For free blocks, this consists of the aforementioned size, followed by a pointer to the last free block and a pointer to the next free block.
 */

const size_t System::USED_HEADER_SIZE = sizeof(size_t);
const size_t System::FREE_HEADER_SIZE = ((2 * sizeof(uintptr_t) + sizeof(size_t));

void* System::free_base = (void*) 0x200000;
void* System::free_top = (void*) 0x400000;
void* System::last_freed = free_base;

void* System::malloc(size_t size)
{
	void* block = System::last_freed;
	for(;;)
	{
		if(block[0] >= size)
		{
			
			block[1][2] = block[2]; // Remove the block from the linked list									
			block[0] = size;
			return block + USED_HEADER_SIZE;
		}
		else
		{
			block = block[1];
			if(block == nullptr) break;
		}
	}
	return nullptr; // No free block big enough was found
}

void System::free(void* ptr)
{
	void* header = ptr - USED_HEADER_SIZE; // Find the beginning of the header
	System::last_freed[2] = header; // Set the "next block" field in the previous header to this one.
	header[1] = System::last_freed; // Set the previous block of this block
	header[2] = nullptr; // The next block is currently unknown
	System::last_freed = ptr;
}
